{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "wagsdm"
		},
		"integrationRuntime_mltest1": {
			"type": "string",
			"metadata": "Integration runtime name",
			"defaultValue": "mltest1"
		},
		"AzureBlobStorage1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage1'"
		},
		"AzureBlobStorage2_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage2'"
		},
		"AzureDataLakeStorage1_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage1'"
		},
		"AzureSQlETL_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSQlETL'"
		},
		"FileServer1_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'FileServer1'"
		},
		"etlADF_accessToken": {
			"type": "secureString",
			"metadata": "Secure string for 'accessToken' of 'etlADF'"
		},
		"idisvr_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'idisvr'"
		},
		"runnotebook_accessToken": {
			"type": "secureString",
			"metadata": "Secure string for 'accessToken' of 'runnotebook'"
		},
		"wagsADB_accessToken": {
			"type": "secureString",
			"metadata": "Secure string for 'accessToken' of 'wagsADB'"
		},
		"AzureDataLakeStorage1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://waginput.dfs.core.windows.net"
		},
		"FileServer1_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "C:\\Work\\"
		},
		"FileServer1_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "vmadmin"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/ADBNotebookRun')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "wagsscm",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "OnPrem to Blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Users/babal@microsoft.com/SCM/test1scala"
						},
						"linkedServiceName": {
							"referenceName": "wagsADB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "OnPrem to Blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "createBatchID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "key",
											"type": "String"
										},
										"sink": {
											"name": "key",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "pickup_datetime",
											"type": "String"
										},
										"sink": {
											"name": "pickup_datetime",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "pickup_longitude",
											"type": "String"
										},
										"sink": {
											"name": "pickup_longitude",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "pickup_latitude",
											"type": "String"
										},
										"sink": {
											"name": "pickup_latitude",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "dropoff_longitude",
											"type": "String"
										},
										"sink": {
											"name": "dropoff_longitude",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "dropoff_latitude",
											"type": "String"
										},
										"sink": {
											"name": "dropoff_latitude",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "passenger_count",
											"type": "String"
										},
										"sink": {
											"name": "passenger_count",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "DelimitedText1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DelimitedText2",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "closebatch",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "wagsscm",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[closebatch]",
							"storedProcedureParameters": {
								"batchid": {
									"value": {
										"value": "@activity('createBatchID').output.firstRow.batchid",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"enddatetime": {
									"value": {
										"value": "@utcnow()",
										"type": "Expression"
									},
									"type": "DateTime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSQlETL",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "createBatchID",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[createbatch]"
							},
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/wagsADB')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedText1')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedText2')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSQlETL')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ADFParallel')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "etlADF",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Users/babal@microsoft.com/SCM/etlADF"
						},
						"linkedServiceName": {
							"referenceName": "etlADF",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "etlADF1",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Users/babal@microsoft.com/SCM/etlADF"
						},
						"linkedServiceName": {
							"referenceName": "etlADF",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "etlADF2",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Users/babal@microsoft.com/SCM/etlADF"
						},
						"linkedServiceName": {
							"referenceName": "etlADF",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Start",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Users/babal@microsoft.com/SCM/runnotebook"
						},
						"linkedServiceName": {
							"referenceName": "etlADF",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Stop",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "etlADF",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "etlADF1",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "etlADF2",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "etlADF3",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "etlADF4",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "etlADF5",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "etlADF6",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "etlADF7",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "etlADF8",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Users/babal@microsoft.com/SCM/runnotebook"
						},
						"linkedServiceName": {
							"referenceName": "etlADF",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "etlADF3",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Users/babal@microsoft.com/SCM/etlADF"
						},
						"linkedServiceName": {
							"referenceName": "etlADF",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "etlADF4",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Users/babal@microsoft.com/SCM/etlADF"
						},
						"linkedServiceName": {
							"referenceName": "etlADF",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "etlADF5",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Users/babal@microsoft.com/SCM/etlADF"
						},
						"linkedServiceName": {
							"referenceName": "etlADF",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "etlADF6",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Users/babal@microsoft.com/SCM/etlADF"
						},
						"linkedServiceName": {
							"referenceName": "etlADF",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "etlADF7",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Users/babal@microsoft.com/SCM/etlADF"
						},
						"linkedServiceName": {
							"referenceName": "etlADF",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "etlADF8",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Users/babal@microsoft.com/SCM/etlADF"
						},
						"linkedServiceName": {
							"referenceName": "etlADF",
							"type": "LinkedServiceReference"
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/etlADF')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DFExecute')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "RunCopyBatch",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"incomingraw": {},
									"rawtrain": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ETLbatchCheck')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "closebatch",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "createBatchID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[closebatch]",
							"storedProcedureParameters": {
								"batchid": {
									"value": {
										"value": "@activity('createBatchID').output.firstRow.batchid",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"enddatetime": {
									"value": {
										"value": "@utcnow(utcnow())",
										"type": "Expression"
									},
									"type": "DateTime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSQlETL",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "createBatchID",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[createbatch]"
							},
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQlETL')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Finalize')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "runnotebook",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Users/babal@microsoft.com/SCM/runnotebook"
						},
						"linkedServiceName": {
							"referenceName": "runnotebook",
							"type": "LinkedServiceReference"
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/runnotebook')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Sales')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Sales",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "salesraw",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "salesfinal",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/salesraw')]",
				"[concat(variables('factoryId'), '/datasets/salesfinal')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ToHyperscale')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "toHyperscale",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "vendorID",
											"type": "String"
										},
										"sink": {
											"name": "vendorID",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "tpepPickupDateTime",
											"type": "DateTime"
										},
										"sink": {
											"name": "tpepPickupDateTime",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "tpepDropoffDateTime",
											"type": "DateTime"
										},
										"sink": {
											"name": "tpepDropoffDateTime",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "passengerCount",
											"type": "Int32"
										},
										"sink": {
											"name": "passengerCount",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "tripDistance",
											"type": "Double"
										},
										"sink": {
											"name": "tripDistance",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "puLocationId",
											"type": "String"
										},
										"sink": {
											"name": "puLocationId",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "doLocationId",
											"type": "String"
										},
										"sink": {
											"name": "doLocationId",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "startLon",
											"type": "Double"
										},
										"sink": {
											"name": "startLon",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "startLat",
											"type": "Double"
										},
										"sink": {
											"name": "startLat",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "endLon",
											"type": "Double"
										},
										"sink": {
											"name": "endLon",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "endLat",
											"type": "Double"
										},
										"sink": {
											"name": "endLat",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "rateCodeId",
											"type": "Int32"
										},
										"sink": {
											"name": "rateCodeId",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "storeAndFwdFlag",
											"type": "String"
										},
										"sink": {
											"name": "storeAndFwdFlag",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "paymentType",
											"type": "String"
										},
										"sink": {
											"name": "paymentType",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "fareAmount",
											"type": "Double"
										},
										"sink": {
											"name": "fareAmount",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "extra",
											"type": "Double"
										},
										"sink": {
											"name": "extra",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "mtaTax",
											"type": "Double"
										},
										"sink": {
											"name": "mtaTax",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "improvementSurcharge",
											"type": "String"
										},
										"sink": {
											"name": "improvementSurcharge",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "tipAmount",
											"type": "Double"
										},
										"sink": {
											"name": "tipAmount",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "tollsAmount",
											"type": "Double"
										},
										"sink": {
											"name": "tollsAmount",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "totalAmount",
											"type": "Double"
										},
										"sink": {
											"name": "totalAmount",
											"type": "Double"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "prateekfiles",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "hyperscaleisi",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/prateekfiles')]",
				"[concat(variables('factoryId'), '/datasets/hyperscaleisi')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/filecheck')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ZipMetadata",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "filecheck",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "ZipMetadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ZipMetadata').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Set variable3",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "dummyvar",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Append variable1",
									"type": "AppendVariable",
									"dependsOn": [
										{
											"activity": "Set variable3",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "filelist",
										"value": {
											"value": "@variables('dummyvar')",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Set variable4",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "filelistcount",
							"value": {
								"value": "@string(length(variables('filelist')))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Set variable4",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('filelistcount'),'2')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "startjobtotmp",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"wildcardFileName": "*"
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".csv"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "filecheck",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DelimitedText3",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"parameters": {
					"filecnt": {
						"type": "int",
						"defaultValue": 0
					}
				},
				"variables": {
					"dummyvar": {
						"type": "String",
						"defaultValue": "0"
					},
					"filelist": {
						"type": "Array"
					},
					"filelistcount": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/filecheck')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedText3')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/jsoninputpipeine')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "jsoninput",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "jsoninput",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"jsoninput": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/jsoninput')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/mainpipeline-par')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Pre Validation",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "filecheck",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute Purchasing",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Pre Validation",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "purchasing",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute Sales",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Pre Validation",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Sales",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Post Cleanup",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Purchasing",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Execute Sales",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Finalize",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/filecheck')]",
				"[concat(variables('factoryId'), '/pipelines/purchasing')]",
				"[concat(variables('factoryId'), '/pipelines/Sales')]",
				"[concat(variables('factoryId'), '/pipelines/Finalize')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/mainpipeline-seq')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Pre Validation",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "filecheck",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute Purchasing",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Pre Validation",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "purchasing",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute Sales",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Purchasing",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Sales",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Post Cleanup",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Sales",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Finalize",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/filecheck')]",
				"[concat(variables('factoryId'), '/pipelines/purchasing')]",
				"[concat(variables('factoryId'), '/pipelines/Sales')]",
				"[concat(variables('factoryId'), '/pipelines/Finalize')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/purchasing')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Purchasing",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "purchasingraw",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "purchasingfinal",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/purchasingraw')]",
				"[concat(variables('factoryId'), '/datasets/purchasingfinal')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQlETL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "batchname",
						"type": "varchar"
					},
					{
						"name": "startdatetime",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "enddatetime",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "batchstatus",
						"type": "varchar"
					},
					{
						"name": "totaltimesec",
						"type": "int",
						"precision": 10
					},
					{
						"name": "inserttime",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "username",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "etlbatch"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQlETL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Binary1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "incoming"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "FileServer1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": "test.csv",
						"folderPath": "wags"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "key",
						"type": "String"
					},
					{
						"name": "pickup_datetime",
						"type": "String"
					},
					{
						"name": "pickup_longitude",
						"type": "String"
					},
					{
						"name": "pickup_latitude",
						"type": "String"
					},
					{
						"name": "dropoff_longitude",
						"type": "String"
					},
					{
						"name": "dropoff_latitude",
						"type": "String"
					},
					{
						"name": "passenger_count",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/FileServer1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "test.csv",
						"fileSystem": "incoming"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "key",
						"type": "String"
					},
					{
						"name": "pickup_datetime",
						"type": "String"
					},
					{
						"name": "pickup_longitude",
						"type": "String"
					},
					{
						"name": "pickup_latitude",
						"type": "String"
					},
					{
						"name": "dropoff_longitude",
						"type": "String"
					},
					{
						"name": "dropoff_latitude",
						"type": "String"
					},
					{
						"name": "passenger_count",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText3')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "tmp"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "datamovies.json",
						"fileSystem": "incoming"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"actors": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"name": {
										"type": "string"
									}
								}
							}
						},
						"availabilityDate": {
							"type": "string"
						},
						"genre": {
							"type": "string"
						},
						"rating": {
							"type": "string"
						},
						"releaseYear": {
							"type": "integer"
						},
						"runtime": {
							"type": "integer"
						},
						"streamingAvailabilityDate": {
							"type": "string"
						},
						"tier": {
							"type": "integer"
						},
						"title": {
							"type": "string"
						},
						"id": {
							"type": "string"
						},
						"_rid": {
							"type": "string"
						},
						"_self": {
							"type": "string"
						},
						"_etag": {
							"type": "string"
						},
						"_attachments": {
							"type": "string"
						},
						"_ts": {
							"type": "integer"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/csvfile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "output"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/filecheck')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "startjob"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/hyperscaleisi')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "idisvr",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "vendorID",
						"type": "varchar"
					},
					{
						"name": "tpepPickupDateTime",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "tpepDropoffDateTime",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "passengerCount",
						"type": "int",
						"precision": 10
					},
					{
						"name": "tripDistance",
						"type": "float",
						"precision": 15
					},
					{
						"name": "puLocationId",
						"type": "varchar"
					},
					{
						"name": "doLocationId",
						"type": "varchar"
					},
					{
						"name": "startLon",
						"type": "float",
						"precision": 15
					},
					{
						"name": "startLat",
						"type": "float",
						"precision": 15
					},
					{
						"name": "endLon",
						"type": "float",
						"precision": 15
					},
					{
						"name": "endLat",
						"type": "float",
						"precision": 15
					},
					{
						"name": "rateCodeId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "storeAndFwdFlag",
						"type": "varchar"
					},
					{
						"name": "paymentType",
						"type": "varchar"
					},
					{
						"name": "fareAmount",
						"type": "float",
						"precision": 15
					},
					{
						"name": "extra",
						"type": "float",
						"precision": 15
					},
					{
						"name": "mtaTax",
						"type": "float",
						"precision": 15
					},
					{
						"name": "improvementSurcharge",
						"type": "varchar"
					},
					{
						"name": "tipAmount",
						"type": "float",
						"precision": 15
					},
					{
						"name": "tollsAmount",
						"type": "float",
						"precision": 15
					},
					{
						"name": "totalAmount",
						"type": "float",
						"precision": 15
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "YellowCab_Rawdata"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/idisvr')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/incomingTrain')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "train.csv",
						"fileSystem": "incoming"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "key",
						"type": "String"
					},
					{
						"name": "fare_amount",
						"type": "String"
					},
					{
						"name": "pickup_datetime",
						"type": "String"
					},
					{
						"name": "pickup_longitude",
						"type": "String"
					},
					{
						"name": "pickup_latitude",
						"type": "String"
					},
					{
						"name": "dropoff_longitude",
						"type": "String"
					},
					{
						"name": "dropoff_latitude",
						"type": "String"
					},
					{
						"name": "passenger_count",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prateekfiles')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "*",
						"folderPath": "nyctlc/yellow",
						"container": "sampledatasets"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "vendorID",
						"type": "UTF8"
					},
					{
						"name": "tpepPickupDateTime",
						"type": "INT96"
					},
					{
						"name": "tpepDropoffDateTime",
						"type": "INT96"
					},
					{
						"name": "passengerCount",
						"type": "INT32"
					},
					{
						"name": "tripDistance",
						"type": "DOUBLE"
					},
					{
						"name": "puLocationId",
						"type": "UTF8"
					},
					{
						"name": "doLocationId",
						"type": "UTF8"
					},
					{
						"name": "startLon",
						"type": "DOUBLE"
					},
					{
						"name": "startLat",
						"type": "DOUBLE"
					},
					{
						"name": "endLon",
						"type": "DOUBLE"
					},
					{
						"name": "endLat",
						"type": "DOUBLE"
					},
					{
						"name": "rateCodeId",
						"type": "INT32"
					},
					{
						"name": "storeAndFwdFlag",
						"type": "UTF8"
					},
					{
						"name": "paymentType",
						"type": "UTF8"
					},
					{
						"name": "fareAmount",
						"type": "DOUBLE"
					},
					{
						"name": "extra",
						"type": "DOUBLE"
					},
					{
						"name": "mtaTax",
						"type": "DOUBLE"
					},
					{
						"name": "improvementSurcharge",
						"type": "UTF8"
					},
					{
						"name": "tipAmount",
						"type": "DOUBLE"
					},
					{
						"name": "tollsAmount",
						"type": "DOUBLE"
					},
					{
						"name": "totalAmount",
						"type": "DOUBLE"
					},
					{
						"name": "puYear",
						"type": "UTF8"
					},
					{
						"name": "puMonth",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/purchasingfinal')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "purchasing",
						"fileSystem": "final"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/purchasingraw')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "bankmarketing_train.csv",
						"folderPath": "purchasing",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "age",
						"type": "String"
					},
					{
						"name": "job",
						"type": "String"
					},
					{
						"name": "marital",
						"type": "String"
					},
					{
						"name": "education",
						"type": "String"
					},
					{
						"name": "default",
						"type": "String"
					},
					{
						"name": "housing",
						"type": "String"
					},
					{
						"name": "loan",
						"type": "String"
					},
					{
						"name": "contact",
						"type": "String"
					},
					{
						"name": "month",
						"type": "String"
					},
					{
						"name": "day_of_week",
						"type": "String"
					},
					{
						"name": "duration",
						"type": "String"
					},
					{
						"name": "campaign",
						"type": "String"
					},
					{
						"name": "pdays",
						"type": "String"
					},
					{
						"name": "previous",
						"type": "String"
					},
					{
						"name": "poutcome",
						"type": "String"
					},
					{
						"name": "emp.var.rate",
						"type": "String"
					},
					{
						"name": "cons.price.idx",
						"type": "String"
					},
					{
						"name": "cons.conf.idx",
						"type": "String"
					},
					{
						"name": "euribor3m",
						"type": "String"
					},
					{
						"name": "nr.employed",
						"type": "String"
					},
					{
						"name": "y",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/rawTrain')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "age",
						"type": "String"
					},
					{
						"name": "job",
						"type": "String"
					},
					{
						"name": "marital",
						"type": "String"
					},
					{
						"name": "education",
						"type": "String"
					},
					{
						"name": "default",
						"type": "String"
					},
					{
						"name": "housing",
						"type": "String"
					},
					{
						"name": "loan",
						"type": "String"
					},
					{
						"name": "contact",
						"type": "String"
					},
					{
						"name": "month",
						"type": "String"
					},
					{
						"name": "day_of_week",
						"type": "String"
					},
					{
						"name": "duration",
						"type": "String"
					},
					{
						"name": "campaign",
						"type": "String"
					},
					{
						"name": "pdays",
						"type": "String"
					},
					{
						"name": "previous",
						"type": "String"
					},
					{
						"name": "poutcome",
						"type": "String"
					},
					{
						"name": "emp.var.rate",
						"type": "String"
					},
					{
						"name": "cons.price.idx",
						"type": "String"
					},
					{
						"name": "cons.conf.idx",
						"type": "String"
					},
					{
						"name": "euribor3m",
						"type": "String"
					},
					{
						"name": "nr.employed",
						"type": "String"
					},
					{
						"name": "y",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/salesfinal')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "sales",
						"fileSystem": "final"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/salesraw')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "bankmarketing_train.csv",
						"folderPath": "sales",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "age",
						"type": "String"
					},
					{
						"name": "job",
						"type": "String"
					},
					{
						"name": "marital",
						"type": "String"
					},
					{
						"name": "education",
						"type": "String"
					},
					{
						"name": "default",
						"type": "String"
					},
					{
						"name": "housing",
						"type": "String"
					},
					{
						"name": "loan",
						"type": "String"
					},
					{
						"name": "contact",
						"type": "String"
					},
					{
						"name": "month",
						"type": "String"
					},
					{
						"name": "day_of_week",
						"type": "String"
					},
					{
						"name": "duration",
						"type": "String"
					},
					{
						"name": "campaign",
						"type": "String"
					},
					{
						"name": "pdays",
						"type": "String"
					},
					{
						"name": "previous",
						"type": "String"
					},
					{
						"name": "poutcome",
						"type": "String"
					},
					{
						"name": "emp.var.rate",
						"type": "String"
					},
					{
						"name": "cons.price.idx",
						"type": "String"
					},
					{
						"name": "cons.conf.idx",
						"type": "String"
					},
					{
						"name": "euribor3m",
						"type": "String"
					},
					{
						"name": "nr.employed",
						"type": "String"
					},
					{
						"name": "y",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage2_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage1_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage1_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSQlETL')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSQlETL_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FileServer1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('FileServer1_properties_typeProperties_host')]",
					"userId": "[parameters('FileServer1_properties_typeProperties_userId')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('FileServer1_password')]"
					}
				},
				"connectVia": {
					"referenceName": "[parameters('integrationRuntime_mltest1')]",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/', parameters('integrationRuntime_mltest1'))]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/etlADF')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDatabricks",
				"typeProperties": {
					"domain": "https://eastus2.azuredatabricks.net",
					"accessToken": {
						"type": "SecureString",
						"value": "[parameters('etlADF_accessToken')]"
					},
					"existingClusterId": "1205-140903-isles770"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/idisvr')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('idisvr_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/runnotebook')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDatabricks",
				"typeProperties": {
					"domain": "https://eastus2.azuredatabricks.net",
					"accessToken": {
						"type": "SecureString",
						"value": "[parameters('runnotebook_accessToken')]"
					},
					"newClusterNodeType": "Standard_DS5_v2",
					"newClusterNumOfWorker": "1",
					"newClusterSparkEnvVars": {
						"PYSPARK_PYTHON": "/databricks/python3/bin/python3"
					},
					"newClusterVersion": "6.2.x-cpu-ml-scala2.11"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/wagsADB')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDatabricks",
				"typeProperties": {
					"domain": "https://eastus2.azuredatabricks.net",
					"accessToken": {
						"type": "SecureString",
						"value": "[parameters('wagsADB_accessToken')]"
					},
					"newClusterNodeType": "Standard_DS3_v2",
					"newClusterNumOfWorker": "2:5",
					"newClusterSparkEnvVars": {
						"PYSPARK_PYTHON": "/databricks/python3/bin/python3"
					},
					"newClusterVersion": "5.4.x-scala2.11"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/', parameters('integrationRuntime_mltest1'))]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"description": "Vm for machine learning.",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "incomingTrain",
								"type": "DatasetReference"
							},
							"name": "incomingraw",
							"typeProperties": {}
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "rawTrain",
								"type": "DatasetReference"
							},
							"name": "rawtrain"
						}
					],
					"transformations": [
						{
							"name": "Select1"
						}
					],
					"script": "source(output(\n\t\tkey as string,\n\t\tfare_amount as string,\n\t\tpickup_datetime as string,\n\t\tpickup_longitude as string,\n\t\tpickup_latitude as string,\n\t\tdropoff_longitude as string,\n\t\tdropoff_latitude as string,\n\t\tpassenger_count as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> incomingraw\nincomingraw select(mapColumn(\n\t\tkey,\n\t\tfare_amount,\n\t\tpickup_datetime,\n\t\tpickup_longitude,\n\t\tpickup_latitude,\n\t\tdropoff_longitude,\n\t\tdropoff_latitude,\n\t\tpassenger_count\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 sink(input(\n\t\tage as string,\n\t\tjob as string,\n\t\tmarital as string,\n\t\teducation as string,\n\t\tdefault as string,\n\t\thousing as string,\n\t\tloan as string,\n\t\tcontact as string,\n\t\tmonth as string,\n\t\tday_of_week as string,\n\t\tduration as string,\n\t\tcampaign as string,\n\t\tpdays as string,\n\t\tprevious as string,\n\t\tpoutcome as string,\n\t\t{emp.var.rate} as string,\n\t\t{cons.price.idx} as string,\n\t\t{cons.conf.idx} as string,\n\t\teuribor3m as string,\n\t\t{nr.employed} as string,\n\t\ty as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> rawtrain"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/incomingTrain')]",
				"[concat(variables('factoryId'), '/datasets/rawTrain')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/jsoninput')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json1",
								"type": "DatasetReference"
							},
							"name": "jsoninput",
							"typeProperties": {}
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "csvfile",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Select1"
						}
					],
					"script": "source(output(\n\t\tactors as (name as string)[],\n\t\tavailabilityDate as string,\n\t\tgenre as string,\n\t\trating as string,\n\t\treleaseYear as string,\n\t\truntime as string,\n\t\tstreamingAvailabilityDate as string,\n\t\ttier as string,\n\t\ttitle as string,\n\t\tid as string,\n\t\t{_rid} as string,\n\t\t{_self} as string,\n\t\t{_etag} as string,\n\t\t{_attachments} as string,\n\t\t{_ts} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> jsoninput\njsoninput derive(actors = map(actors,#item)) ~> DerivedColumn1\nDerivedColumn1 select(mapColumn(\n\t\tactors,\n\t\tavailabilityDate,\n\t\tgenre,\n\t\trating,\n\t\treleaseYear,\n\t\truntime,\n\t\tstreamingAvailabilityDate,\n\t\ttier,\n\t\ttitle,\n\t\tid,\n\t\t{_rid},\n\t\t{_self},\n\t\t{_etag},\n\t\t{_attachments},\n\t\t{_ts}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Json1')]",
				"[concat(variables('factoryId'), '/datasets/csvfile')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/cpblobtohyperscale')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "prateekfiles",
								"type": "DatasetReference"
							},
							"name": "prateekblob",
							"typeProperties": {}
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "hyperscaleisi",
								"type": "DatasetReference"
							},
							"name": "hyperscale"
						}
					],
					"transformations": [
						{
							"name": "Select1"
						}
					],
					"script": "source(output(\n\t\tvendorID as string,\n\t\ttpepPickupDateTime as timestamp,\n\t\ttpepDropoffDateTime as timestamp,\n\t\tpassengerCount as integer,\n\t\ttripDistance as double,\n\t\tpuLocationId as string,\n\t\tdoLocationId as string,\n\t\tstartLon as double,\n\t\tstartLat as double,\n\t\tendLon as double,\n\t\tendLat as double,\n\t\trateCodeId as integer,\n\t\tstoreAndFwdFlag as string,\n\t\tpaymentType as string,\n\t\tfareAmount as double,\n\t\textra as double,\n\t\tmtaTax as double,\n\t\timprovementSurcharge as string,\n\t\ttipAmount as double,\n\t\ttollsAmount as double,\n\t\ttotalAmount as double,\n\t\tpuYear as string,\n\t\tpuMonth as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> prateekblob\nprateekblob select(mapColumn(\n\t\tvendorID,\n\t\ttpepPickupDateTime,\n\t\ttpepDropoffDateTime,\n\t\tpassengerCount,\n\t\ttripDistance,\n\t\tpuLocationId,\n\t\tdoLocationId,\n\t\tstartLon,\n\t\tstartLat,\n\t\tendLon,\n\t\tendLat,\n\t\trateCodeId,\n\t\tstoreAndFwdFlag,\n\t\tpaymentType,\n\t\tfareAmount,\n\t\textra,\n\t\tmtaTax,\n\t\timprovementSurcharge,\n\t\ttipAmount,\n\t\ttollsAmount,\n\t\ttotalAmount,\n\t\tpuYear,\n\t\tpuMonth\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 sink(input(\n\t\tvendorID as string,\n\t\ttpepPickupDateTime as timestamp,\n\t\ttpepDropoffDateTime as timestamp,\n\t\tpassengerCount as integer,\n\t\ttripDistance as double,\n\t\tpuLocationId as string,\n\t\tdoLocationId as string,\n\t\tstartLon as double,\n\t\tstartLat as double,\n\t\tendLon as double,\n\t\tendLat as double,\n\t\trateCodeId as integer,\n\t\tstoreAndFwdFlag as string,\n\t\tpaymentType as string,\n\t\tfareAmount as double,\n\t\textra as double,\n\t\tmtaTax as double,\n\t\timprovementSurcharge as string,\n\t\ttipAmount as double,\n\t\ttollsAmount as double,\n\t\ttotalAmount as double\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tbatchSize: 10000,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> hyperscale"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/prateekfiles')]",
				"[concat(variables('factoryId'), '/datasets/hyperscaleisi')]"
			]
		}
	]
}